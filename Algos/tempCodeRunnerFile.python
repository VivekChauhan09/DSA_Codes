import mysql.connector
from datetime import datetime
con=mysql.connector.connect(host="localhost",
                            user="root",
                            password="vivek",
                            database="attendance_management_system_for_3rd_sem")
if con.is_connected():
    print("CONNECTION SUCCESSFUL")
else:
    print("CONNECTION FAILED")
curobj = con.cursor()

def disp_stud_det():
    try:
        query = "SELECT rollno, stud_name, overall_attendance FROM student_details_section_a"
        curobj.execute(query)
        data = curobj.fetchall()
        for record in data:
            print(f"STUDENT's ROLLNO : {record[0]}, STUDENT's NAME : {record[1]}, OVERALL ATTENDANCE : {record[2]}")
    except Exception as e:
        print(f"Error: {e}")

        
def mark_math(roll_no):
    try:
        print(roll_no)
        current_date = datetime.now().strftime("%Y-%m-%d")
        user_input_name = input("Enter the date: ")
        sanitized_column_name = user_input_name.replace(" ", "_")

        query1 = f"ALTER TABLE maths_attendance ADD COLUMN {sanitized_column_name} char(1) DEFAULT 'P';"
        curobj.execute(query1)
        con.commit()

        if len(roll_no) == 1:
            query2 = f"UPDATE maths_attendance SET {sanitized_column_name} = 'A' WHERE rollno = {roll_no[0]};"
        else:
            roll_num = tuple(roll_no)
            query2 = f"UPDATE maths_attendance SET {sanitized_column_name} = 'A' WHERE rollno IN {roll_num};"

        curobj.execute(query2)
        con.commit()
        print("Attendance updated successfully")

        # query3= "UPDATE student_details_section_a SET total_maths_lec = total_maths_lec+1"
        # curobj.execute(query3)
        # con.commit()
        # query4= "UPDATE student_details_section_a SET attended_maths_lec = attended_maths_lec+1  where rollno NOT IN {roll_num}"
        # curobj.execute(query4)
        # con.commit()

    except Exception as e:
        print(f"Error: {e}")


def disp_maths():
    query = "SELECT * FROM maths_attendance"
    curobj.execute(query)
    columns = [column[0] for column in curobj.description]
    rows = curobj.fetchall()
    print(" | ".join(f"{str(column).ljust(9)}" for column in columns))
    for row in rows:
        print(" | ".join(f"{str(value).ljust(9)}" for value in row))

def mark_logic(roll_no):
    try:
        current_date = datetime.now().strftime("%Y-%m-%d")
        user_input_name = input("Enter the date : ")
        sanitized_column_name = user_input_name.replace(" ", "_")
        query = f"ALTER TABLE logic_design_attendance ADD COLUMN {sanitized_column_name} char(1) DEFAULT 'P';"
        curobj.execute(query)
        con.commit()
        roll_num = tuple(roll_no)
        query = f"UPDATE logic_design_attendance SET {sanitized_column_name} = 'A' WHERE rollno IN {roll_num}"
        curobj.execute(query)
        con.commit()
        print("Attendance updated successfully")
    except Exception as e:
        print(f"Error: {e}")


def disp_logic():
    query = "SELECT * FROM logic_design_attendance"
    curobj.execute(query)
    columns = [column[0] for column in curobj.description]
    rows = curobj.fetchall()
    print(" | ".join(f"{str(column).ljust(9)}" for column in columns))
    for row in rows:
        print(" | ".join(f"{str(value).ljust(9)}" for value in row))

def mark_ds(roll_no):
    try:
        current_date = datetime.now().strftime("%Y-%m-%d")
        user_input_name = input("Enter the date : ")
        sanitized_column_name = user_input_name.replace(" ", "_")
        query = f"ALTER TABLE data_structure_attendance ADD COLUMN {sanitized_column_name} char(1) DEFAULT 'P';"
        curobj.execute(query)
        con.commit()
        roll_num = tuple(roll_no)
        query = f"UPDATE data_structure_attendance SET {sanitized_column_name} = 'A' WHERE rollno IN {roll_num}"
        curobj.execute(query)
        con.commit()
        print("Attendance updated successfully")
    except Exception as e:
        print(f"Error: {e}")

def disp_ds():
    query = "SELECT * FROM data_structure_attendance"
    curobj.execute(query)
    columns = [column[0] for column in curobj.description]
    rows = curobj.fetchall()
    print(" | ".join(f"{str(column).ljust(9)}" for column in columns))
    for row in rows:
        print(" | ".join(f"{str(value).ljust(9)}" for value in row))


def mark_oops(roll_no):
    try:
        current_date = datetime.now().strftime("%Y-%m-%d")
        user_input_name = input("Enter the date : ")
        sanitized_column_name = user_input_name.replace(" ", "_")
        query = f"ALTER TABLE oops_attendance ADD COLUMN {sanitized_column_name} char(1) DEFAULT 'P';"
        curobj.execute(query)
        con.commit()
        roll_num = tuple(roll_no)
        query = f"UPDATE oops_attendance SET {sanitized_column_name} = 'A' WHERE rollno IN {roll_num}"
        curobj.execute(query)
        con.commit()
        print("Attendance updated successfully")
    except Exception as e:
        print(f"Error: {e}")

def disp_oops():
    query = "SELECT * FROM oops_attendance"
    curobj.execute(query)
    columns = [column[0] for column in curobj.description]
    rows = curobj.fetchall()
    print(" | ".join(f"{str(column).ljust(9)}" for column in columns))
    for row in rows:
        print(" | ".join(f"{str(value).ljust(9)}" for value in row))


while True:
    print("1. SHOW STUDENT DETAILS ")
    print("2. MARK MATHS ATTENDANCE ")
    print("3. SHOW MATHS ATTENDANCE ")
    print("4. MARK LOGIC_DESIGN ATTENDANCE ")
    print("5. SHOW LOGIC_DESIGN ATTENDANCE ")
    print("6. MARK DATA_STRUCTURE ATTENDANCE ")
    print("7. SHOW DATA_STRUCTURE ATTENDANCE ")
    print("8. MARK OOPS ATTENDANCE ")
    print("9. SHOW OOPS ATTENDANCE ")
    print("10.SHOW OVERALL ATTENDANCE ")
    print("11.EXIT")
    print()
    ch=int(input("ENTER YOUR CHOICE : "))
    if ch==1:
        disp_stud_det()
        print()

    elif ch==2:
        rollno = []
        num=int(input("Enter the number of absentees : "))
        for i in range(num):
            val=int(input("Enter the roll number"))
            rollno.append(val)
        mark_math(rollno)

    elif ch==3:
        disp_maths()
        print()

    elif ch==4:
        rollno = []
        num=int(input("Enter the number of absentees : "))
        for i in range(num):
            val=int(input("Enter the roll number"))
            rollno.append(val)
        mark_logic(rollno)

    elif ch==5:
        disp_logic()
        print()

    elif ch==6:
        rollno = []
        num=int(input("Enter the number of absentees : "))
        for i in range(num):
            val=int(input("Enter the roll number"))
            rollno.append(val)
        mark_ds(rollno)

    elif ch==7:
        disp_ds()
        print()

    elif ch==8:
        rollno = []
        num=int(input("Enter the number of absentees : "))
        for i in range(num):
            val=int(input("Enter the roll number"))
            rollno.append(val)
        mark_oops(rollno)

    elif ch==9:
        disp_oops()
        print()

    # elif ch==10:

    elif ch==11:
        print("PROGRAM TERMINATED SUCCESSFULLY ")
        print()
        break

    else:
        print("INVALID CHOICE ")
        print()